import 'dart:convert';
import 'dart:io';
import 'package:json_annotation/json_annotation.dart';
import 'package:path/path.dart' as p;

part 'generate_names.g.dart';

@JsonSerializable(createToJson: false)
class NamesList {
  final String namespace;
  final String namespacePrefix;
  final List<String> tags;

  NamesList(this.namespace, this.namespacePrefix, this.tags);

  factory NamesList.fromJson(Map<String, dynamic> json) =>
      _$NamesListFromJson(json);
}

String generateNamesCode(
    String scriptName, String namesFileName, NamesList names) {
  StringBuffer output = StringBuffer();

  output.writeln("""
// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated from $namesFileName
// Generated by $scriptName
""");

  var namespace = "${names.namespace}Namespace";

  output.writeln("import 'dom.dart';");
  output.writeln("import 'namespaces.dart';");
  output.writeln();

  for (var tag in names.tags) {
    output.writeln("const String ${tag}Tag = '$tag';");
    output.writeln(
        "const QName ${tag}QName = QName(name: '$tag', namespace: $namespace);");
    output.writeln();
  }
  return output.toString();
}

void main() async {
  var namesFileNames = [
    'html_names.json',
  ];

  var scriptPath = p.canonicalize(Platform.script.toFilePath());
  var scriptName = p.basename(scriptPath);
  var inputDir = p.dirname(scriptPath);
  var rootPath = p.dirname(p.dirname(scriptPath));
  var outputDir = p.join(rootPath, 'lib', 'src');

  for (var namesFileName in namesFileNames) {
    var namesFile = File(p.join(inputDir, namesFileName));
    var namesString = namesFile.readAsStringSync();
    var names = NamesList.fromJson(json.decode(namesString));

    // FIXME: Should use .g.dart but build_runner gets confused?
    var outputName = '${names.namespace}_names.dart';
    var outputPath = p.join(outputDir, outputName);
    var output = File(outputPath);

    output.writeAsString(generateNamesCode(scriptName, namesFileName, names));
  }
}
